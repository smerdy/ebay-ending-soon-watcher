'use strict';

/*
 * decaffeinate suggestions:
 * DS101: Remove unnecessary use of Array.from
 * DS102: Remove unnecessary code created because of implicit returns
 * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md
 */
/*if (process.env.NODE_ENV !== 'production') {
  require('dotenv').config({path: __dirname + '/.env'});
}*/

//Lets require/import the HTTP module
var restify = require('restify');
var trim = require('trim');
var request = require('request');
var cheerio = require('cheerio');
var server = restify.createServer({
  name: 'ebay-ending-watcher',
  version: '1.0.0' });
// add any additional custom server configuration

function time(ms) {
  var datestring = new Date(ms).toISOString().slice(11, -1);
  console.log(datestring);
  return datestring;
}

server.use(restify.acceptParser(server.acceptable));
server.use(restify.queryParser());
server.use(restify.bodyParser());
server.get('/ebay-ending-soon/:name', function (req, res, next) {
  var lh_complete = req.params.LH_Complete || 0;
  var lh_sold = req.params.LH_Sold || 0;
  var lh_bin = req.params.LH_BIN || 0;

  var search_url = 'http://www.ebay.com/sch/i.html?_from=R40&_sacat=0&_nkw=${req.params.name}&_sop=1&_udlo=${req.params.price_low}&_udhi=${req.params.price_high}&LH_Complete=${lh_complete}&LH_Sold=${lh_sold}&LH_BIN=${lh_bin}&LH_ItemCondition=1000|1500|3000';

  console.log(search_url);
  request(search_url, function (error, response, body) {
    if (response.statusCode === 200) {
      var $ = cheerio.load(body);
      var itemsData = Array.from($('.sresult')).map(function (ebayListing) {
        return {
          title: trim($(ebayListing).find('h3.lvtitle').text()),
          price: parseFloat(trim($(ebayListing).find('.lvprice').text()).replace(',', '').replace('$', '')),
          endsAt: 5, //time(parseInt($(ebayListing).find('.timeleft .timeMs').attr('timems'))),
          itemListingUrl: $(ebayListing).find('.lvtitle a').attr('href'),
          itemPictureUrl: $(ebayListing).find('.lvpic img').attr('src')
        };
      });
      res.send(itemsData);
    }
  });
  return next();
});

var port = process.env.PORT || 5000;
server.listen(port, function () {
  console.log('%s listening at %s', server.name, server.url);
});

// ---
// generated by js2coffee 2.2.0

// ---
// generated by js2coffee 2.2.0
// ---
// generated by js2coffee 2.2.0